$date
	Thu Jun 16 21:42:51 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testCore $end
$var wire 1 ! _WB_WrtEn $end
$var wire 32 " _WB_WrtData [31:0] $end
$var wire 5 # _WB_WrtAddr [4:0] $end
$var wire 1 $ _MEMWB_WrtEn $end
$var wire 32 % _MEMWB_WrtData [31:0] $end
$var wire 5 & _MEMWB_WrtAddr [4:0] $end
$var wire 32 ' _MEMWB_Data2 [31:0] $end
$var wire 32 ( _MEMWB_Data1 [31:0] $end
$var wire 5 ) _MEMWB_Addr2 [4:0] $end
$var wire 5 * _MEMWB_Addr1 [4:0] $end
$var wire 1 + _IDEXE_regWrite $end
$var wire 32 , _IDEXE_imm32 [31:0] $end
$var wire 32 - _IDEXE_Data2 [31:0] $end
$var wire 32 . _IDEXE_Data1 [31:0] $end
$var wire 5 / _IDEXE_Addr2 [4:0] $end
$var wire 5 0 _IDEXE_Addr1 [4:0] $end
$var wire 5 1 _IDEXE_ALUOp [4:0] $end
$var wire 1 2 _EXEMEM_WrtEn $end
$var wire 32 3 _EXEMEM_WrtData [31:0] $end
$var wire 5 4 _EXEMEM_WrtAddr [4:0] $end
$var wire 32 5 _EXEMEM_Data2 [31:0] $end
$var wire 32 6 _EXEMEM_Data1 [31:0] $end
$var wire 5 7 _EXEMEM_Addr2 [4:0] $end
$var wire 5 8 _EXEMEM_Addr1 [4:0] $end
$var wire 32 9 IFID_pcAddr [31:0] $end
$var wire 32 : IFID_instr [31:0] $end
$var reg 1 ; clk $end
$var reg 1 < reset $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1<
0;
bx :
bx 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
02
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
b0 #
b0 "
0!
$end
#5
b0 9
b0 :
b0 ,
b0 -
b0 /
b0 .
b0 0
b0 1
0+
1;
#8
0<
#10
0;
#15
b110010110010011 :
1;
#20
0;
#25
b1 9
b100001110011000010011 :
b11100000000000000000000011000000 .
1;
#30
0;
#35
b10 9
b1000010110011010010011 :
b10110010011 ,
1;
#40
0;
#45
b11 9
b1100011110011100010011 :
b11000010011 ,
b1011 /
1;
#50
0;
#55
b1011 7
b11100000000000000000000011000000 6
12
b1011 4
b11100000000000000000011011010011 3
b100 9
b10000100110011110010011 :
b1 1
1+
b1010000000000000000100000000000 .
b1100 /
b1 0
b11010010011 ,
1;
#60
0;
#65
b101 9
b10100101110100000010011 :
b1100 7
b1 8
b1010000000000000000100000000000 6
b1100 4
b1010000000000000000111010010011 3
b1011 )
b11100000000000000000000011000000 (
1$
b1011 &
b11100000000000000000011011010011 %
b11100010011 ,
b101000000000000000000000000100 .
b1101 /
b10 0
1;
#70
0;
#75
1!
b1011 #
b11100000000000000000011011010011 "
b1100 )
b1 *
b1010000000000000000100000000000 (
b1100 &
b1010000000000000000111010010011 %
b1101 7
b10 8
b101000000000000000000000000100 6
b1101 4
b101000000000000000011100010111 3
b110 9
b11000110110100010010011 :
b10100000000000000000000000000 .
b1110 /
b11 0
b11110010011 ,
1;
#80
0;
#85
b111 9
b11100111110100100010011 :
b1110 7
b11 8
b10100000000000000000000000000 6
b1110 4
b10100000000000000011110010011 3
b1101 )
b10 *
b101000000000000000000000000100 (
b1101 &
b101000000000000000011100010111 %
b1100 #
b1010000000000000000111010010011 "
b100000010011 ,
b1010000000000000000000000000 .
b1111 /
b100 0
1;
#90
0;
#95
b1101 #
b101000000000000000011100010111 "
b1110 )
b11 *
b10100000000000000000000000000 (
b1110 &
b10100000000000000011110010011 %
b1111 7
b100 8
b1010000000000000000000000000 6
b1111 4
b1010000000000000100000010011 3
b1000 9
b100001000110100110010011 :
b101000000000000001000111000 .
b10000 /
b101 0
b100010010011 ,
1;
#100
0;
#105
b1001 9
b100101001110101000010011 :
b10000 7
b101 8
b101000000000000001000111000 6
b10000 4
b101000000000000101010111011 3
b1111 )
b100 *
b1010000000000000000000000000 (
b1111 &
b1010000000000000100000010011 %
b1110 #
b10100000000000000011110010011 "
b100100010011 ,
b1100000000110000000000000000000 .
b10001 /
b110 0
1;
#110
0;
#115
b1111 #
b1010000000000000100000010011 "
b10000 )
b101 *
b101000000000000001000111000 (
b10000 &
b101000000000000101010111011 %
b10001 7
b110 8
b1100000000110000000000000000000 6
b10001 4
b1100000000110000000100100010011 3
b1010 9
b101001010110101010010011 :
b110000000010000110000001110 .
b10010 /
b111 0
b100110010011 ,
1;
#120
0;
